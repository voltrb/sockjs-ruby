h1. About

_*Disclaimer:* This library is still work in progress._

SockJS is WebSocket emulation library. It means that you use the WebSocket API, only instead of @WebSocket@ class you instantiate @SockJS@ class. I highly recommend to read "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation on the RabbitMQ blog for more info.

h2. Prerequisites

Even though this library uses Rack interface, *Thin is required* as "it supports asynchronous callback":http://macournoyer.com/blog/2009/06/04/pusher-and-async-with-thin. For Websockets, we use "faye-websocket":http://blog.jcoglan.com/2011/11/28/announcing-faye-websocket-a-standards-compliant-websocket-library gem.

h2. The Client-Side Part

For the client-side part you have to use JS library "sockjs-client":http://sockjs.github.com/sockjs-client which provides WebSocket-like API. Here's an example:

<pre>
<script src="http://cdn.sockjs.org/sockjs-0.3.4.min.js"></script>

<script>
  var sock = new SockJS("http://mydomain.com/echo");

  sock.onopen = function() {
    console.log("open");
  };

  sock.onmessage = function(e) {
    console.log("message", e.data);
  };

  sock.onclose = function() {
    console.log("close");
  };
  
  // watch it work by doing sock.send('/echo') from the console
</script>
</pre>

h2. The Server-Side Part

Now in order to have someone to talk to, we need to run a server. That's exactly what is sockjs-ruby good for!
The following will initialize the sock client on the browser, and setup the server.

<pre>
#!/usr/bin/env ruby
# encoding: utf-8

require "thin"
require "rack"
require "rack/sockjs"

# Your custom app.
class MyHelloWorld
  def call(env)
    body = <<-HTML
<html>
  <head>
    <title>Hello World!</title>
    <script src="http://cdn.sockjs.org/sockjs-0.3.4.min.js"></script>

    <script>
      var sock = new SockJS("/echo");

      sock.onopen = function() {
       console.log("open");
      };

      sock.onmessage = function(e) {
        console.log("message", e.data);
      };

      sock.onclose = function() {
        console.log("close");
      };

      // from the console => sock.send('test');
      // from the console => sock.close();
    </script>
  </head>
  <body>
    <h1>Hello World!</h1>
    <p>
      This is the app, not SockJS.
    </p>
  </body>
</html>
HTML
     
    headers = {
      "Content-Type" => "text/html; charset=UTF-8",
      "Content-Length" => body.bytesize.to_s
    }

    [200, headers, [body]]
  end
end

class EchoSession < SockJS::Session
  def process_message(message)
    SockJS.debug "\033[0;31;40m[Echo]\033[0m message: #{message.inspect}, session: #{self.object_id}"
    send(message)
  end
end

class CloseSession < SockJS::Session
  def opened
    SockJS.debug "\033[0;31;40m[Close]\033[0m closing the session ..."
    close(3000, "Go away!")
  end
end

app = Rack::Builder.new do
  # Run one SockJS app on /echo.
  map "/echo" do
    run Rack::SockJS.new(EchoSession)
  end

  # ... and the other one on /close.
  map "/close" do
    run Rack::SockJS.new(CloseSession)
  end

  # This app will run on other URLs than /echo and /close,
  # as these has already been assigned to SockJS.
  run MyHelloWorld.new
end

thin = Rack::Handler.get("thin")
thin.run(app.to_app, Port: 3000, Host: "0.0.0.0")
</pre>

For more complex example check "examples/sockjs_apps_for_sockjs_protocol_tests.rb":https://github.com/sockjs/sockjs-ruby/blob/master/examples/sockjs_apps_for_sockjs_protocol_tests.rb


h2. SockJS Family

* "SockJS-client":https://github.com/sockjs/sockjs-client JavaScript client library.
* "SockJS-node":https://github.com/sockjs/sockjs-node Node.js server.
* "SockJS-ruby":https://github.com/sockjs/sockjs-ruby Ruby server.
* "SockJS-protocol":https://github.com/sockjs/sockjs-protocol protocol tests and documentation.
* "SockJS-protocol spec":http://sockjs.github.com/sockjs-protocol/sockjs-protocol-0.2.1.html

h1. Development

Get "sockjs-protocol":https://github.com/sockjs/sockjs-protocol (installation information are in its README) and run @rake protocol_test@. Now you can run the tests against it, for instance:

<pre>
# Run all the tests.
./venv/bin/python sockjs-protocol-0.2.1.py

# Run all the tests defined in XhrStreaming.
./venv/bin/python sockjs-protocol-0.2.1.py XhrStreaming

# Run only XhrStreaming.test_transport test.
./venv/bin/python sockjs-protocol-0.2.1.py XhrStreaming.test_transport
</pre>

h1. Links

* "SockJS: WebSocket emulation":http://www.rabbitmq.com/blog/2011/09/13/sockjs-websocket-emulation
* "SockJS: web messaging ain't easy":http://www.rabbitmq.com/blog/2011/08/22/sockjs-web-messaging-aint-easy
* "PubSubHuddle Realtime Web talk":http://www.rabbitmq.com/blog/2011/09/26/pubsubhuddle-realtime-web-talk
